과정명 : 프로젝트형 빅데이터 분석 서비스 개발
강사명 : 김정현(unicodaum@hanmail.net)

프로그래밍 역량 : 분석역량 = 6 : 4
전공자(IT계열) : 비전공자 =  2 : 8
[ 공통 교과 ]
4주 : 파이썬-데이터베이스-웹프로그래밍(클라이언트(HTML,CSS,JavaScript),서버(DJango))
2주 : 팀프로젝트
[ 전공 교과 ]
R 언어 구문, 데이터 수집&저장, EDA, 데이터 전처리, 분석1,시각화-미니프로젝트(1주)
파이썬 언어 데이터 수집&저장, EDA, 데이터 전처리, 분석2,시각화
                 스파크 - 전공프로젝트(2주)
[ 융합 프로젝트 ]



[ 학습전 설문 ]
메일제목 : 빅데이터분석서비스-XXX
작성내용 :
(1) 전공학과(복수전공, 부전공)
(2) 프로그래밍 학습 경험
     (C, Java, JavaScript, R, Python)
(3) 웹 프로그래밍 학습 경험
     (HTML, CSS, JavaScript, jQuery, Servlet, JSP, PHP...)
(4) 데이터 분석 학습 경험
     (R, Python, SPSS, EXCEL)
(5) 기타 건의 사항
          




자료 공유 URL - http://naver.me/56I8CgbA
                       비밀번호 - 2021

[ 파이썬 프로그래밍의 기초 구문 ]
- 프로그램을 구성하는 요소들
(1) 리터럴 : 프로그램에서 다루는 데이터 값
                10, 3.14, 'num', "num", '김', True, False, 123, '123', '@#', ..
(2) 변수 : 값을 저장하려는 메모리 영역에 부여한 이름
 
      (1+2+3+4+5+6+7+8+9+10) / 10
      (1+2+3+4+5+6+7+8+9+10) * 10
      (1+2+3+4+5+6+7+8+9+10) - 10

      result = 1+2+3+4+5+6+7+8+9+10
      result / 10
      result * 10
      result - 10

      - 만들어서 사용한다.
      - 변수명 규칙 : 키워드는 변수명이 될 수 없다. 
                           숫자로 시작할 수 없다.
                           특수문자는 _(언더스코어)만 사용 가능하다.
          	           공백사용 불가하다.
                           대소문자 구분(NUM, num, Num)
      변수명 = 식
                   (리터럴, 변수, 연산식, 함수의호출식)
      l-value = r-value
      (방, 메모리공간)    값

     v1 = 10
     v2 = 20
     v3 = v1 + v2
     v4 = v1
     v4 = v1 + 100
     v4 = v5   --> 구문 오류 발생
     v5 = len([10,20,30])

    변수의 사용 : 방(l-value), 값(r-value)

(3) 연산자와 연산식(식)
     연산자 : 값을 가지고 처리하려는 기능을 나타내는 기호
                  +, -, *, /, //, %, ==, !=, >, <, >=, <=, and, or, +=, -=, *=, =
     피연산자 : 연산의 대상이 되는 값(변수, 리터럴, 연산식  --> 식) 
     연산식 : 연산자와 피연산로 구성된 식을 연산식

(4) 데이터타입
     데이터 값의 종류
     
     123 * 3    --> 369
     '123' * 3  --> '123123123'
                           
     '@' * 100

    10 + 20  --> 30
    '10' + "20"  --> "1020"
    '10' + 20 --> 오류
    '10' + str(20)  --> '1020'

   숫자형, 문자열형, 부울형(대수형) 
     
(5) 주석
    코드에 대한 설명, 일부 코드를 실행하지 않게 하려는 경우
    
    단일행 주석 -  # xxxxxxxxx
    다중행 주석 - """ xxxxxxxxx
                             xxxxxxxxx
                             xxxxxxxxx """

(6) 함수 
     프로그래밍에서의 함수(서브루틴)
     자주 사용되는 명령(코드)들을 담고있는 블럭(주머니)  --> 프로그램의 재사용성
     함수에 의해 처리되는 기능에 따라 데이터를 받을 수도 있고 수행 결과값을 리턴할 수 있다.
     (수행 결과값이 없는 경우에는 None(없음)이라는 리터럴이 리턴된다.)
 
     - 함수 만드는 방법 
             def 함수명() :
	코드블럭
     - 함수 사용하는 방법 - 호출
            함수명()
            함수명(값1, 값2)	

         

 1101
 0b1101  --> 13

10진수
16진수
2진수
8진수

0x1a   -->  1x16**1 + 10x16**0
                  1x16 + 10 x 1  --> 26

"Have a "nice" day"
'Have a "nice" day'
"Have a \"nice\" day"
"n"
"\n"  --> 개행문자, 행바꿈문자
"aaa\nbbb" --> aaa
                           bbb
"aaa\tbbb"  --> aaa	bbb

"c:\\kjh\\PYTHONexam\\day1\\test.py"

"c:/kjh/PYTHONexam/day1/test.py"


a -= 1 --> a = a-1
a *= 3 --> a = a*3

- 제어문(프로그램의 수행 흐름을 제어한다.)
   if, elif, else     ---> 조건제어문
   for, while       ---> 반복제어문
   break, continue   ---> 분기제어문

   break : 반복문을 끝내라...

[ 반복문 ]

   for 변수 in 데이터값집합 :
       반복처리할수행문장의블럭

   for d in [10,20,30] :
       print(d)

   for d in [1,2,3,4,5,6,7,8,9] :
       print(3 * d)

   for d in range(1, 10, 1 ):
       print(3 * d)

   for d in range(1, 20, 1 ):
       print(3 * d)

   for i in range(10) :
       성적처리

   range(10)  	-> 0~9
   range(1,10) 	-> 1~9
   range(1,10,2)	-> 1,3,5,7,9
   range(2,10,2)	-> 2,4,6,8
   range(10,1,-1)	-> 10,9,8,7,6,5,4,3,2
   range(10,101,10)	-> 10, 20, 30, 40, 50, 60, 70, 80, 90, 100


  while 조건식 :
      반복하려는수행문장블럭

  while True :
      반복하려는수행문장블럭     ---> 무한루프

  while True :
      반복하려는수행문장블럭
      if 조건식 :
          break 

  3, 6, 9, 12, 15, 18

  [   ], {   }, (   )



































